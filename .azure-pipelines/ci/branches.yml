# pipeline suggested name: CI branches
# this pipeline validates and generate the builds for master or develop branch
#
# Define variables - MS Azure DevOps Docs
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
#

name: $(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true
  branches:
    include:
      - master
      - staging
      - develop
  paths:
    exclude:
      - .azure-pipelines/*
      - .vscode/*
      - tools/*
      - docs/*
      - README.md

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - template: ../templates/var_env.yml

stages:
  - stage: validate_build
    displayName: validate and build
    jobs:
      - job: initial_setup
        displayName: nx calculate commands
        steps:
          - template: ../templates/steps_install-node-modules.yml
          - script: echo $(Build.SourceBranchName)
            name: echoBranchName
          - script: |
              echo "##vso[task.setvariable variable=COMMANDS;isOutput=true]$(node ./tools/scripts/nx-calculate-commands.js $(Build.SourceBranchName))"
            name: setCommands
          - script: echo $(setCommands.COMMANDS)
            name: echoCommands

      - job: failure
        displayName: no app to build
        dependsOn: initial_setup
        condition: |
          contains(
            dependencies.initial_setup.outputs['setCommands.COMMANDS'],
            '"build":[]'
          )
        steps:
          - checkout: none
          - script: |
              echo "##vso[task.complete result=SucceededWithIssues;]DONE"
            displayName: stop the pipeline

      - job: lint
        displayName: lint projects
        dependsOn:
          - failure
          - initial_setup
        condition: |
          and(
            eq(dependencies.failure.result, 'Skipped'),
            succeeded('initial_setup'),
            not(
              contains(
                dependencies.initial_setup.outputs['setCommands.COMMANDS'],
                '"lint":[]'
              )
            )
          )
        variables:
          COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
        steps:
          - template: ../templates/steps_install-node-modules.yml
          - script: node ./tools/scripts/nx-run-many.js '$(COMMANDS)' lint
            displayName: running lint

      - job: test
        displayName: test projects
        dependsOn:
          - failure
          - initial_setup
        condition: |
          and(
            eq(dependencies.failure.result, 'Skipped'),
            succeeded('initial_setup'),
            not(
              contains(
                dependencies.initial_setup.outputs['setCommands.COMMANDS'],
                '"test":[]'
              )
            )
          )
        variables:
          COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
        steps:
          - template: ../templates/steps_install-node-modules.yml
          - script: node ./tools/scripts/nx-run-many.js '$(COMMANDS)' test
            displayName: running tests
          - template: ../templates/steps_publish-test-results.yml

      - job: build_storybook
        displayName: build storybook
        dependsOn:
          - lint
          - test
          - initial_setup
        condition: |
          and(
            eq(variables['ENV'], 'dev'),
            succeeded('lint'),
            succeeded('test'),
            succeeded('initial_setup'),
            not(
              contains(
                dependencies.initial_setup.outputs['setCommands.COMMANDS'],
                '"build-storybook":[]'
              )
            )
          )
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
          - template: ../templates/steps_install-node-modules.yml
          - script: node ./tools/scripts/nx-run-all.js build-storybook prod
            displayName: running build storybook
          - script: node ./tools/scripts/storybook-create-root-index-html.js
            displayName: generate the root index.html
          - template: ../templates/steps_storybook-artifact_publish.yml

      - job: build_apps
        displayName: build applications
        dependsOn:
          - lint
          - test
          - initial_setup
        condition: |
          and(
            succeeded('lint'),
            succeeded('test'),
            succeeded('initial_setup'),
            not(
              contains(
                dependencies.initial_setup.outputs['setCommands.COMMANDS'],
                '"build":[]'
              )
            )
          )
        variables:
          COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
          - template: ../templates/steps_install-node-modules.yml
          - script: node ./tools/scripts/nx-run-many.js '$(COMMANDS)' build $(ENV)
            displayName: running builds
          - template: ../templates/steps_apps-artifact_publish.yml
          - script: |
              git tag ci-build/$(Build.BuildNumber)
              git push origin ci-build/$(Build.BuildNumber)
            displayName: add a git tag

  - stage: git_push
    displayName: git push
    dependsOn: validate_build
    condition: eq(dependencies.validate_build.result, 'Succeeded')
    jobs:
      - job: push_apps
        displayName: push the builded apps
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
          - template: ../templates/steps_apps-artifact_download.yml
          - template: ../templates/steps_install-node-modules.yml
          - template: ../templates/steps_download-github-pat.yml
          - script: node ./tools/scripts/git-push-apps-builds-to-branches.js $(ENV) $(Pipeline.Workspace)/apps $(cat $(githubPat.secureFilePath))
            displayName: running git push

      - job: push_storybook
        displayName: push the builded storybook
        condition: |
          and(
            eq(variables['ENV'], 'dev'),
            not(
              contains(
                stageDependencies.validate_build.initial_setup.outputs['setCommands.COMMANDS'],
                '"build-storybook":[]'
              )
            )
          )
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
          - template: ../templates/steps_storybook-artifact_download.yml
          - template: ../templates/steps_install-node-modules.yml
          - template: ../templates/steps_download-github-pat.yml
          - script: node ./tools/scripts/git-push-storybook-builds-to-branch.js $(Pipeline.Workspace)/storybook $(cat $(githubPat.secureFilePath))
            displayName: running git push
