# pipeline suggested name: CI branches
# this pipeline validates and generate the builds for master or develop branch

name: $(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true
  branches:
    include:
      - master
      - develop
  paths:
    exclude:
      - .azure-pipelines/*
      - .vscode/*
      - docs/*
      - tools/*
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - template: ../templates/var_env.yml

stages:
  - stage: validate_build
    displayName: validate and build
    jobs:
      - job: initial_setup
        displayName: nx calculate commands
        steps:
          - template: ../templates/steps_install-node-modules.yml
          - script: |
              echo "##vso[task.setvariable variable=COMMANDS;isOutput=true]$(node ./tools/scripts/nx-calculate-commands.js $(SourceBranchName))"
            name: setCommands
          - script: echo $(setCommands.COMMANDS)
            name: echoCommands

      - job: failure
        displayName: no app to build
        dependsOn: initial_setup
        condition: |
          contains(
            dependencies.initial_setup.outputs['setCommands.COMMANDS'],
            '"build":[]'
          )
        steps:
          - checkout: none
          - script: |
              echo "##vso[task.complete result=SucceededWithIssues;]DONE"
            displayName: trigger the failure

      - job: lint
        displayName: lint projects
        dependsOn:
          - failure
          - initial_setup
        condition: |
          and(
            eq(dependencies.failure.result, 'Skipped'),
            succeeded('initial_setup'),
            not(
              contains(
                dependencies.initial_setup.outputs['setCommands.COMMANDS'],
                '"lint":[]'
              )
            )
          )
        variables:
          COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
        steps:
          - template: ../templates/steps_install-node-modules.yml
          - script: node ./tools/scripts/nx-run-many.js '$(COMMANDS)' lint
            displayName: running lint

      - job: test
        displayName: test projects
        dependsOn:
          - failure
          - initial_setup
        condition: |
          and(
            eq(dependencies.failure.result, 'Skipped'),
            succeeded('initial_setup'),
            not(
              contains(
                dependencies.initial_setup.outputs['setCommands.COMMANDS'],
                '"test":[]'
              )
            )
          )
        variables:
          COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
        steps:
          - template: ../templates/steps_install-node-modules.yml
          - script: node ./tools/scripts/nx-run-many.js '$(COMMANDS)' test
            displayName: running tests

      - job: build
        displayName: build projects
        dependsOn:
          - lint
          - test
          - initial_setup
        condition: |
          and(
            succeeded('lint'),
            succeeded('test'),
            succeeded('initial_setup'),
            not(
              contains(
                dependencies.initial_setup.outputs['setCommands.COMMANDS'],
                '"build":[]'
              )
            )
          )
        variables:
          COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
        steps:
          - template: ../templates/steps_install-node-modules.yml
          - script: node ./tools/scripts/nx-run-many.js '$(COMMANDS)' build $(ENV)
            displayName: running builds
          - publish: $(System.DefaultWorkingDirectory)/dist/apps
            artifact: apps

  - stage: git_push
    displayName: git push
    dependsOn: validate_build
    condition: eq(dependencies.validate_build.result, 'Succeeded')
    jobs:
      - job: push_all
        displayName: push the builded apps
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
          - template: ../templates/steps_config-deploy-key.yml
          - download: current
            artifact: apps
          - script: |
              cd $(Pipeline.Workspace)/apps
              ls
            displayName: list apps available on $(Pipeline.Workspace)/apps
          - template: ../templates/steps_install-node-modules.yml
          - script: node ./tools/scripts/git-push-builds-to-branches.js $(Pipeline.Workspace)/apps $(ENV) ci
            displayName: running git push
